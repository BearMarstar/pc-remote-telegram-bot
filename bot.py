import telebot
from telebot import types
import os
import platform
import pyautogui
import socket

TOKEN = '–¢–í–û–ô_–¢–û–ö–ï–ù_–ó–î–ï–°–¨'
AUTHORIZED_USERS = {123456789}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID

bot = telebot.TeleBot(TOKEN)

def is_authorized(message):
    return message.from_user.id in AUTHORIZED_USERS

def escape_md(text: str) -> str:
    escape_chars = r"_*[]()~`>#+-=|{}.!\\"
    return ''.join(['\\' + c if c in escape_chars else c for c in str(text)])

def get_local_ip() -> str:
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            return s.getsockname()[0]
    except Exception:
        try:
            return socket.gethostbyname(socket.gethostname())
        except:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP"

def main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [
        types.KeyboardButton("üìü –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏"),
        types.KeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç"),
        types.KeyboardButton("üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π IP"),
        types.KeyboardButton("‚èª –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö"),
        types.KeyboardButton("‚è≥ –¢–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è"),
        types.KeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö"),
        types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"),
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π
        types.KeyboardButton("‚èØÔ∏è –ü–ª–µ–π/–ü–∞—É–∑–∞"),
        types.KeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"),
        types.KeyboardButton("‚èÆÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫"),
        types.KeyboardButton("üîâ –ì—Ä–æ–º–∫–æ—Å—Ç—å +"),
        types.KeyboardButton("üîà –ì—Ä–æ–º–∫–æ—Å—Ç—å -"),
        types.KeyboardButton("üîá –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫"),
    ]
    keyboard.add(*buttons)
    return keyboard

def timer_cancel_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π —Å pyautogui (–ø—Ä–∏–º–µ—Ä –¥–ª—è Windows)
def media_control(action):
    try:
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è pyautogui:
        # playpause: 'playpause' –∏–ª–∏ 'space' (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–ª–µ–µ—Ä–∞)
        # next: 'nexttrack'
        # prev: 'prevtrack'
        # volumeup/volumedown/mute –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ system calls
        if action == "playpause":
            pyautogui.press('playpause')
        elif action == "next":
            pyautogui.press('nexttrack')
        elif action == "prev":
            pyautogui.press('prevtrack')
        elif action == "volup":
            pyautogui.press('volumeup')
        elif action == "voldown":
            pyautogui.press('volumedown')
        elif action == "mute":
            pyautogui.press('volumemute')
        else:
            return False
        return True
    except Exception as e:
        print(f"Media control error: {e}")
        return False

@bot.message_handler(commands=['start'])
def cmd_start(message):
    if is_authorized(message):
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())
    else:
        bot.reply_to(message, f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –í–∞—à ID: {message.from_user.id}")

@bot.message_handler(func=lambda m: True)
def handle_buttons(message):
    if not is_authorized(message):
        bot.reply_to(message, "üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø!")
        return

    text = message.text

    if text == "üìü –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏":
        bot.reply_to(message, "‚úÖ –ü–ö —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ")

    elif text == "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç":
        try:
            path = "screenshot.png"
            pyautogui.screenshot(path)
            with open(path, 'rb') as photo:
                bot.send_photo(message.chat.id, photo)
            os.remove(path)
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

    elif text == "üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π IP":
        ip = escape_md(get_local_ip())
        bot.reply_to(message, f"üåê –õ–æ–∫–∞–ª—å–Ω—ã–π IP: `{ip}`", parse_mode='MarkdownV2')

    elif text == "‚èª –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö":
        bot.reply_to(message, "‚ö†Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥!")
        if platform.system() == "Windows":
            os.system("shutdown /s /t 5")
        else:
            os.system("shutdown -h now")

    elif text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö":
        bot.reply_to(message, "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        if platform.system() == "Windows":
            os.system("shutdown /r /t 5")
        else:
            os.system("shutdown -r now")

    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ":
        info = (
            f"*–û–°:* {escape_md(platform.system())}\n"
            f"*–í–µ—Ä—Å–∏—è:* {escape_md(platform.version())}\n"
            f"*–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:* {escape_md(platform.processor())}\n"
            f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {escape_md(os.getlogin())}"
        )
        bot.reply_to(message, info, parse_mode='MarkdownV2')

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–æ–π
    elif text == "‚èØÔ∏è –ü–ª–µ–π/–ü–∞—É–∑–∞":
        if media_control("playpause"):
            bot.reply_to(message, "‚èØÔ∏è –ü–ª–µ–π/–ü–∞—É–∑–∞")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π")

    elif text == "‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫":
        if media_control("next"):
            bot.reply_to(message, "‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π")

    elif text == "‚èÆÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫":
        if media_control("prev"):
            bot.reply_to(message, "‚èÆÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π")

    elif text == "üîâ –ì—Ä–æ–º–∫–æ—Å—Ç—å +":
        if media_control("volup"):
            bot.reply_to(message, "üîâ –ì—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é")

    elif text == "üîà –ì—Ä–æ–º–∫–æ—Å—Ç—å -":
        if media_control("voldown"):
            bot.reply_to(message, "üîà –ì—Ä–æ–º–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é")

    elif text == "üîá –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫":
        if media_control("mute"):
            bot.reply_to(message, "üîá –ó–≤—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞")

    elif text == "‚è≥ –¢–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è":
        msg = bot.send_message(message.chat.id, "–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤—ã–∫–ª—é—á–∏—Ç—å –ü–ö? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞")))
        bot.register_next_step_handler(msg, set_timer)

    elif text == "–û—Ç–º–µ–Ω–∞":
        if platform.system() == "Windows":
            os.system("shutdown /a")
            bot.send_message(message.chat.id, "‚õî –¢–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_keyboard())
        else:
            bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –û–° –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.", reply_markup=main_keyboard())

    else:
        bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

def set_timer(message):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        if platform.system() == "Windows":
            os.system("shutdown /a")
            bot.send_message(message.chat.id, "‚õî –¢–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_keyboard())
        else:
            bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –û–° –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.", reply_markup=main_keyboard())
        return

    if message.text.isdigit():
        minutes = int(message.text)
        if minutes <= 0:
            bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return
        bot.send_message(message.chat.id, f"–ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.", reply_markup=main_keyboard())
        if platform.system() == "Windows":
            os.system(f"shutdown /s /t {minutes * 60}")
        else:
            os.system(f"bash -c 'sleep {minutes * 60} && shutdown -h now' &")
    else:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")
        bot.register_next_step_handler(msg, set_timer)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
